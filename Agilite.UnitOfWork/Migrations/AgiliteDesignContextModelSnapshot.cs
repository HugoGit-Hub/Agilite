// <auto-generated />
using System;
using Agilite.UnitOfWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agilite.UnitOfWork.Migrations
{
    [DbContext(typeof(AgiliteDesignContext))]
    partial class AgiliteDesignContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Agilite.Entities.Entities.Contact", b =>
                {
                    b.Property<int>("IdContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdContact"));

                    b.Property<short>("ArchivedContact")
                        .HasColumnType("smallint");

                    b.Property<string>("NameContact")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("IdContact");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Message", b =>
                {
                    b.Property<int>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMessage"));

                    b.Property<string>("TextMessage")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("IdMessage");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Objective", b =>
                {
                    b.Property<int>("IdObjective")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdObjective"));

                    b.Property<int>("EnumTypeObjective")
                        .HasColumnType("int");

                    b.Property<string>("NameObjective")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("NumberObjective")
                        .HasColumnType("int");

                    b.Property<int>("SprintIdSprint")
                        .HasColumnType("int")
                        .HasColumnName("Sprint_IdSprint");

                    b.Property<string>("TextObjective")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdObjective");

                    b.HasIndex(new[] { "SprintIdSprint" }, "fk_Objective_Sprint1_idx");

                    b.ToTable("Objective", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Planning", b =>
                {
                    b.Property<int>("IdPlanning")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPlanning");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlanning"));

                    b.Property<DateTime>("EndDatePlanning")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDatePlanning")
                        .HasColumnType("datetime");

                    b.Property<int>("UserIdUser")
                        .HasColumnType("int")
                        .HasColumnName("User_IdUser");

                    b.HasKey("IdPlanning");

                    b.HasIndex(new[] { "UserIdUser" }, "fk_Planning_User1_idx");

                    b.ToTable("Planning", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Project", b =>
                {
                    b.Property<int>("IdProject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProject"));

                    b.Property<DateTime>("DateCreationProject")
                        .HasColumnType("datetime");

                    b.Property<string>("DateEnded")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("NameProject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TeamIdTeam")
                        .HasColumnType("int")
                        .HasColumnName("Team_IdTeam");

                    b.HasKey("IdProject");

                    b.HasIndex(new[] { "TeamIdTeam" }, "fk_Project_Team1_idx");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Sprint", b =>
                {
                    b.Property<int>("IdSprint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSprint"));

                    b.Property<DateTime>("EndDateSprint")
                        .HasColumnType("datetime");

                    b.Property<int>("NumberSprint")
                        .HasColumnType("int");

                    b.Property<int>("ProjectIdProject")
                        .HasColumnType("int")
                        .HasColumnName("Project_IdProject");

                    b.Property<DateTime>("StartDateSprint")
                        .HasColumnType("datetime");

                    b.HasKey("IdSprint");

                    b.HasIndex(new[] { "ProjectIdProject" }, "fk_Sprint_Project1_idx");

                    b.ToTable("Sprint", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Task", b =>
                {
                    b.Property<int>("IdTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTask"));

                    b.Property<DateTime?>("EndLogTimeTask")
                        .HasColumnType("datetime");

                    b.Property<int>("EnumStateTask")
                        .HasColumnType("int");

                    b.Property<int>("EnumTypeTask")
                        .HasColumnType("int");

                    b.Property<string>("NameTask")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("NumberTask")
                        .HasColumnType("int");

                    b.Property<int>("ObjectiveIdObjective")
                        .HasColumnType("int")
                        .HasColumnName("Objective_IdObjective");

                    b.Property<DateTime?>("StartLogTimeTask")
                        .HasColumnType("datetime");

                    b.Property<string>("TextTask")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTask");

                    b.HasIndex(new[] { "ObjectiveIdObjective" }, "fk_Task_Objective1_idx");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Team", b =>
                {
                    b.Property<int>("IdTeam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTeam"));

                    b.Property<string>("NameTeam")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberMembersTeam")
                        .HasColumnType("int");

                    b.HasKey("IdTeam");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.TeamRole", b =>
                {
                    b.Property<int>("IdTeamRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTeamRole");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTeamRole"));

                    b.Property<int>("AccessTeamRole")
                        .HasColumnType("int");

                    b.Property<string>("TitleTeamRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTeamRole");

                    b.ToTable("TeamRole", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<int?>("AgeUser")
                        .HasColumnType("int");

                    b.Property<string>("DateCreationUser")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("EnumRoleUser")
                        .HasColumnType("int");

                    b.Property<string>("FirstNameUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastNameUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdUser");

                    b.HasIndex(new[] { "EmailUser" }, "EmailUser_UNIQUE")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.UserMessageContact", b =>
                {
                    b.Property<int>("UserIdUser")
                        .HasColumnType("int")
                        .HasColumnName("User_IdUser");

                    b.Property<int>("ContactIdContact")
                        .HasColumnType("int")
                        .HasColumnName("Contact_IdContact");

                    b.Property<int>("MessageIdMessage")
                        .HasColumnType("int")
                        .HasColumnName("Message_IdMessage");

                    b.Property<DateTime>("DateTimeUserMessageContact")
                        .HasColumnType("datetime");

                    b.HasKey("UserIdUser", "ContactIdContact", "MessageIdMessage")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "ContactIdContact" }, "fk_User_has_Contact_Contact1_idx");

                    b.HasIndex(new[] { "MessageIdMessage" }, "fk_User_has_Contact_Message1_idx");

                    b.HasIndex(new[] { "UserIdUser" }, "fk_User_has_Contact_User_idx");

                    b.ToTable("UserMessageContact", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.UserTeamTeamRole", b =>
                {
                    b.Property<int>("UserIdUser")
                        .HasColumnType("int")
                        .HasColumnName("User_IdUser");

                    b.Property<int>("TeamIdTeam")
                        .HasColumnType("int")
                        .HasColumnName("Team_IdTeam");

                    b.Property<int>("TeamRoleIdTeamRole")
                        .HasColumnType("int")
                        .HasColumnName("TeamRole_idTeamRole");

                    b.Property<DateTime>("DateTimeUserTeamTeamRole")
                        .HasColumnType("datetime");

                    b.HasKey("UserIdUser", "TeamIdTeam", "TeamRoleIdTeamRole")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "TeamIdTeam" }, "fk_User_has_Team_Team1_idx");

                    b.HasIndex(new[] { "TeamRoleIdTeamRole" }, "fk_User_has_Team_TeamRole1_idx");

                    b.HasIndex(new[] { "UserIdUser" }, "fk_User_has_Team_User1_idx");

                    b.ToTable("UserTeamTeamRole", (string)null);
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Objective", b =>
                {
                    b.HasOne("Agilite.Entities.Entities.Sprint", "SprintIdSprintNavigation")
                        .WithMany("Objectives")
                        .HasForeignKey("SprintIdSprint")
                        .IsRequired()
                        .HasConstraintName("fk_Objective_Sprint1");

                    b.Navigation("SprintIdSprintNavigation");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Planning", b =>
                {
                    b.HasOne("Agilite.Entities.Entities.User", "UserIdUserNavigation")
                        .WithMany("Plannings")
                        .HasForeignKey("UserIdUser")
                        .IsRequired()
                        .HasConstraintName("fk_Planning_User1");

                    b.Navigation("UserIdUserNavigation");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Project", b =>
                {
                    b.HasOne("Agilite.Entities.Entities.Team", "TeamIdTeamNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("TeamIdTeam")
                        .IsRequired()
                        .HasConstraintName("fk_Project_Team1");

                    b.Navigation("TeamIdTeamNavigation");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Sprint", b =>
                {
                    b.HasOne("Agilite.Entities.Entities.Project", "ProjectIdProjectNavigation")
                        .WithMany("Sprints")
                        .HasForeignKey("ProjectIdProject")
                        .IsRequired()
                        .HasConstraintName("fk_Sprint_Project1");

                    b.Navigation("ProjectIdProjectNavigation");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Task", b =>
                {
                    b.HasOne("Agilite.Entities.Entities.Objective", "ObjectiveIdObjectiveNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("ObjectiveIdObjective")
                        .IsRequired()
                        .HasConstraintName("fk_Task_Objective1");

                    b.Navigation("ObjectiveIdObjectiveNavigation");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.UserMessageContact", b =>
                {
                    b.HasOne("Agilite.Entities.Entities.Contact", "ContactIdContactNavigation")
                        .WithMany("UserMessageContacts")
                        .HasForeignKey("ContactIdContact")
                        .IsRequired()
                        .HasConstraintName("fk_User_has_Contact_Contact1");

                    b.HasOne("Agilite.Entities.Entities.Message", "MessageIdMessageNavigation")
                        .WithMany("UserMessageContacts")
                        .HasForeignKey("MessageIdMessage")
                        .IsRequired()
                        .HasConstraintName("fk_User_has_Contact_Message1");

                    b.HasOne("Agilite.Entities.Entities.User", "UserIdUserNavigation")
                        .WithMany("UserMessageContacts")
                        .HasForeignKey("UserIdUser")
                        .IsRequired()
                        .HasConstraintName("fk_User_has_Contact_User");

                    b.Navigation("ContactIdContactNavigation");

                    b.Navigation("MessageIdMessageNavigation");

                    b.Navigation("UserIdUserNavigation");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.UserTeamTeamRole", b =>
                {
                    b.HasOne("Agilite.Entities.Entities.Team", "TeamIdTeamNavigation")
                        .WithMany("UserTeamTeamRoles")
                        .HasForeignKey("TeamIdTeam")
                        .IsRequired()
                        .HasConstraintName("fk_User_has_Team_Team1");

                    b.HasOne("Agilite.Entities.Entities.TeamRole", "TeamRoleIdTeamRoleNavigation")
                        .WithMany("UserTeamTeamRoles")
                        .HasForeignKey("TeamRoleIdTeamRole")
                        .IsRequired()
                        .HasConstraintName("fk_User_has_Team_TeamRole1");

                    b.HasOne("Agilite.Entities.Entities.User", "UserIdUserNavigation")
                        .WithMany("UserTeamTeamRoles")
                        .HasForeignKey("UserIdUser")
                        .IsRequired()
                        .HasConstraintName("fk_User_has_Team_User1");

                    b.Navigation("TeamIdTeamNavigation");

                    b.Navigation("TeamRoleIdTeamRoleNavigation");

                    b.Navigation("UserIdUserNavigation");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Contact", b =>
                {
                    b.Navigation("UserMessageContacts");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Message", b =>
                {
                    b.Navigation("UserMessageContacts");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Objective", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Project", b =>
                {
                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Sprint", b =>
                {
                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.Team", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("UserTeamTeamRoles");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.TeamRole", b =>
                {
                    b.Navigation("UserTeamTeamRoles");
                });

            modelBuilder.Entity("Agilite.Entities.Entities.User", b =>
                {
                    b.Navigation("Plannings");

                    b.Navigation("UserMessageContacts");

                    b.Navigation("UserTeamTeamRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
